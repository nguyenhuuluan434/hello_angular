{"version":3,"sources":["/Users/misko/work/angular/dist/packages-dist/animations/bundles/animations.umd.js"],"names":["global","factory","exports","module","define","amd","ng","animations","this","AnimationEvent","ɵStyleData","AnimationMetadata","AnimationTriggerMetadata","AnimationStateMetadata","AnimationTransitionMetadata","AnimationReferenceMetadata","AnimationQueryMetadata","AnimationKeyframesSequenceMetadata","AnimationStyleMetadata","AnimationAnimateMetadata","AnimationAnimateChildMetadata","AnimationAnimateRefMetadata","AnimationSequenceMetadata","AnimationGroupMetadata","AnimationStaggerMetadata","trigger","name","definitions","type","AnimationMetadataType","Trigger","options","animate","timings","styles","Animate","group","steps","Group","sequence","Sequence","style","tokens","Style","offset","state","State","keyframes","Keyframes","transition","stateChangeExpr","Transition","expr","animation","Reference","animateChild","AnimateChild","useAnimation","AnimateRef","query","selector","Query","stagger","Stagger","scheduleMicroTask","cb","Promise","resolve","then","AnimationPlayer","AnimationBuilder","AnimationFactory","AUTO_STYLE","NoopAnimationPlayer","_onDoneFns","_onStartFns","_onDestroyFns","_started","_destroyed","_finished","parentPlayer","totalTime","prototype","_onFinish","forEach","fn","onStart","push","onDone","onDestroy","hasStarted","init","play","triggerMicrotask","_onStart","_this","pause","restart","finish","destroy","reset","setPosition","p","getPosition","AnimationGroupPlayer","_players","doneCount","destroyCount","startCount","total","length","player","_onDestroy","reduce","time","Math","max","timeAtPosition","position","min","Object","defineProperty","get","enumerable","configurable","beforeDestroy","players","ɵPRE_STYLE","ɵAnimationGroupPlayer","value"],"mappings":";;;;;CAKC,SAAUA,OAAQC,SACC,gBAAZC,UAA0C,mBAAXC,QAAyBF,QAAQC,SACrD,kBAAXE,SAAyBA,OAAOC,IAAMD,QAAQ,WAAYH,SAChEA,SAASD,OAAOM,GAAKN,OAAOM,OAAUN,OAAOM,GAAGC,iBAChDC,KAAM,SAAWN,SAAW,YA4G1B,SAASO;;;;;;;;AAiBT,QAASC,eAyBb,QAASC,sBAQT,QAASC,6BAQT,QAASC,2BAQT,QAASC,gCAKT,QAASC,+BAKT,QAASC,2BAQT,QAASC,uCAQT,QAASC,2BAQT,QAASC,6BAQT,QAASC,kCAQT,QAASC,gCAQT,QAASC,8BAQT,QAASC,2BAQT,QAASC,6BAiHT,QAASC,SAAQC,KAAMC,aACnB,OAASC,KAAMC,sBAAsBC,QAASJ,KAAMA,KAAMC,YAAaA,YAAaI,YAkDxF,QAASC,SAAQC,QAASC,QAEtB,MADe,UAAXA,SAAqBA,OAAS,OACzBN,KAAMC,sBAAsBM,QAASD,OAAQA,OAAQD,QAASA,SAoC3E,QAASG,OAAMC,MAAON,SAElB,MADgB,UAAZA,UAAsBA,QAAU,OAC3BH,KAAMC,sBAAsBS,MAAOD,MAAOA,MAAON,QAASA,SAuCvE,QAASQ,UAASF,MAAON,SAErB,MADgB,UAAZA,UAAsBA,QAAU,OAC3BH,KAAMC,sBAAsBW,SAAUH,MAAOA,MAAON,QAASA,SA8C1E,QAASU,OAAMC,QACX,OAASd,KAAMC,sBAAsBc,MAAOT,OAAQQ,OAAQE,OAAQ,MAsDxE,QAASC,OAAMnB,KAAMQ,OAAQH,SACzB,OAASH,KAAMC,sBAAsBiB,MAAOpB,KAAMA,KAAMQ,OAAQA,OAAQH,QAASA,SAiDrF,QAASgB,WAAUV,OACf,OAAST,KAAMC,sBAAsBmB,UAAWX,MAAOA,OA6L3D,QAASY,YAAWC,gBAAiBb,MAAON,SAExC,MADgB,UAAZA,UAAsBA,QAAU,OAC3BH,KAAMC,sBAAsBsB,WAAYC,KAAMF,gBAAiBG,UAAWhB,MAAON,QAASA,SAwCvG,QAASsB,WAAUhB,MAAON,SAEtB,MADgB,UAAZA,UAAsBA,QAAU,OAC3BH,KAAMC,sBAAsByB,UAAWD,UAAWhB,MAAON,QAASA,SAqG/E,QAASwB,cAAaxB,SAElB,MADgB,UAAZA,UAAsBA,QAAU,OAC3BH,KAAMC,sBAAsB2B,aAAczB,QAASA,SAYhE,QAAS0B,cAAaJ,UAAWtB,SAE7B,MADgB,UAAZA,UAAsBA,QAAU,OAC3BH,KAAMC,sBAAsB6B,WAAYL,UAAWA,UAAWtB,QAASA,SAkGpF,QAAS4B,OAAMC,SAAUP,UAAWtB,SAEhC,MADgB,UAAZA,UAAsBA,QAAU,OAC3BH,KAAMC,sBAAsBgC,MAAOD,SAAUA,SAAUP,UAAWA,UAAWtB,QAASA,SAmFnG,QAAS+B,SAAQ7B,QAASoB,WACtB,OAASzB,KAAMC,sBAAsBkC,QAAS9B,QAASA,QAASoB,UAAWA;;;;;;;;;AAmB3E,QAASW,mBAAkBC,IAC3BC,QAAQC,QAAQ,MAAMC,KAAKH;;;;;;;AAsB/B,QAASI;;;;;AAlpCT,GAAIC,kBAAoB,WACpB,QAASA,qBAET,MAAOA,qBASPC,iBAAoB,WACpB,QAASA,qBAET,MAAOA,qBA6DP1C,uBACAiB,MAAO,EACPK,WAAY,EACZX,SAAU,EACVF,MAAO,EACPH,QAAS,EACTa,UAAW,EACXL,MAAO,EACPb,QAAS,EACTwB,UAAW,EACXE,aAAc,EACdE,WAAY,GACZG,MAAO,GACPE,QAAS,IAKTS,WAAa,IAwjCbC,oBAAuB,WACvB,QAASA,uBACLjE,KAAKkE,cACLlE,KAAKmE,eACLnE,KAAKoE,iBACLpE,KAAKqE,UAAW,EAChBrE,KAAKsE,YAAa,EAClBtE,KAAKuE,WAAY,EACjBvE,KAAKwE,aAAe,KACpBxE,KAAKyE,UAAY,EAkGrB,MA7FAR,qBAAoBS,UAAUC,UAAY,WACjC3E,KAAKuE,YACNvE,KAAKuE,WAAY,EACjBvE,KAAKkE,WAAWU,QAAQ,SAAUC,IAAM,MAAOA,QAC/C7E,KAAKkE,gBAObD,oBAAoBS,UAAUI,QAAU,SAAUD,IAAM7E,KAAKmE,YAAYY,KAAKF,KAK9EZ,oBAAoBS,UAAUM,OAAS,SAAUH,IAAM7E,KAAKkE,WAAWa,KAAKF,KAK5EZ,oBAAoBS,UAAUO,UAAY,SAAUJ,IAAM7E,KAAKoE,cAAcW,KAAKF,KAIlFZ,oBAAoBS,UAAUQ,WAAa,WAAc,MAAOlF,MAAKqE,UAIrEJ,oBAAoBS,UAAUS,KAAO,aAIrClB,oBAAoBS,UAAUU,KAAO,WAC5BpF,KAAKkF,eACNlF,KAAKqF,mBACLrF,KAAKsF,YAETtF,KAAKqE,UAAW,GAKpBJ,oBAAoBS,UAAUW,iBAAmB,WAC7C,GAAIE,OAAQvF,IACZwD,mBAAkB,WAAc,MAAO+B,OAAMZ,eAKjDV,oBAAoBS,UAAUY,SAAW,WACrCtF,KAAKmE,YAAYS,QAAQ,SAAUC,IAAM,MAAOA,QAChD7E,KAAKmE,gBAKTF,oBAAoBS,UAAUc,MAAQ,aAItCvB,oBAAoBS,UAAUe,QAAU,aAIxCxB,oBAAoBS,UAAUgB,OAAS,WAAc1F,KAAK2E,aAI1DV,oBAAoBS,UAAUiB,QAAU,WAC/B3F,KAAKsE,aACNtE,KAAKsE,YAAa,EACbtE,KAAKkF,cACNlF,KAAKsF,WAETtF,KAAK0F,SACL1F,KAAKoE,cAAcQ,QAAQ,SAAUC,IAAM,MAAOA,QAClD7E,KAAKoE,mBAMbH,oBAAoBS,UAAUkB,MAAQ,aAKtC3B,oBAAoBS,UAAUmB,YAAc,SAAUC,KAItD7B,oBAAoBS,UAAUqB,YAAc,WAAc,MAAO,IAC1D9B,uBAcP+B,qBAAwB,WAIxB,QAASA,sBAAqBC,UAC1B,GAAIV,OAAQvF,IACZA,MAAKiG,SAAWA,SAChBjG,KAAKkE,cACLlE,KAAKmE,eACLnE,KAAKuE,WAAY,EACjBvE,KAAKqE,UAAW,EAChBrE,KAAKsE,YAAa,EAClBtE,KAAKoE,iBACLpE,KAAKwE,aAAe,KACpBxE,KAAKyE,UAAY,CACjB,IAAqByB,WAAY,EACZC,aAAe,EACfC,WAAa,EACbC,MAAQrG,KAAKiG,SAASK,MAC9B,IAATD,MACA7C,kBAAkB,WAAc,MAAO+B,OAAMZ,cAG7C3E,KAAKiG,SAASrB,QAAQ,SAAU2B,QAC5BA,OAAO/B,aAAee,MACtBgB,OAAOvB,OAAO,aACJkB,WAAaG,OACfd,MAAMZ,cAGd4B,OAAOtB,UAAU,aACPkB,cAAgBE,OAClBd,MAAMiB,eAGdD,OAAOzB,QAAQ,aACLsB,YAAcC,OAChBd,MAAMD,eAKtBtF,KAAKyE,UAAYzE,KAAKiG,SAASQ,OAAO,SAAUC,KAAMH,QAAU,MAAOI,MAAKC,IAAIF,KAAMH,OAAO9B,YAAe,GAuIhH,MAlIAuB,sBAAqBtB,UAAUC,UAAY,WAClC3E,KAAKuE,YACNvE,KAAKuE,WAAY,EACjBvE,KAAKkE,WAAWU,QAAQ,SAAUC,IAAM,MAAOA,QAC/C7E,KAAKkE,gBAMb8B,qBAAqBtB,UAAUS,KAAO,WAAcnF,KAAKiG,SAASrB,QAAQ,SAAU2B,QAAU,MAAOA,QAAOpB,UAK5Ga,qBAAqBtB,UAAUI,QAAU,SAAUD,IAAM7E,KAAKmE,YAAYY,KAAKF,KAI/EmB,qBAAqBtB,UAAUY,SAAW,WACjCtF,KAAKkF,eACNlF,KAAKmE,YAAYS,QAAQ,SAAUC,IAAM,MAAOA,QAChD7E,KAAKmE,eACLnE,KAAKqE,UAAW,IAOxB2B,qBAAqBtB,UAAUM,OAAS,SAAUH,IAAM7E,KAAKkE,WAAWa,KAAKF,KAK7EmB,qBAAqBtB,UAAUO,UAAY,SAAUJ,IAAM7E,KAAKoE,cAAcW,KAAKF,KAInFmB,qBAAqBtB,UAAUQ,WAAa,WAAc,MAAOlF,MAAKqE,UAItE2B,qBAAqBtB,UAAUU,KAAO,WAC7BpF,KAAKwE,cACNxE,KAAKmF,OAETnF,KAAKsF,WACLtF,KAAKiG,SAASrB,QAAQ,SAAU2B,QAAU,MAAOA,QAAOnB,UAK5DY,qBAAqBtB,UAAUc,MAAQ,WAAcxF,KAAKiG,SAASrB,QAAQ,SAAU2B,QAAU,MAAOA,QAAOf,WAI7GQ,qBAAqBtB,UAAUe,QAAU,WAAczF,KAAKiG,SAASrB,QAAQ,SAAU2B,QAAU,MAAOA,QAAOd,aAI/GO,qBAAqBtB,UAAUgB,OAAS,WACpC1F,KAAK2E,YACL3E,KAAKiG,SAASrB,QAAQ,SAAU2B,QAAU,MAAOA,QAAOb,YAK5DM,qBAAqBtB,UAAUiB,QAAU,WAAc3F,KAAKwG,cAI5DR,qBAAqBtB,UAAU8B,WAAa,WACnCxG,KAAKsE,aACNtE,KAAKsE,YAAa,EAClBtE,KAAK2E,YACL3E,KAAKiG,SAASrB,QAAQ,SAAU2B,QAAU,MAAOA,QAAOZ,YACxD3F,KAAKoE,cAAcQ,QAAQ,SAAUC,IAAM,MAAOA,QAClD7E,KAAKoE,mBAMb4B,qBAAqBtB,UAAUkB,MAAQ,WACnC5F,KAAKiG,SAASrB,QAAQ,SAAU2B,QAAU,MAAOA,QAAOX,UACxD5F,KAAKsE,YAAa,EAClBtE,KAAKuE,WAAY,EACjBvE,KAAKqE,UAAW,GAMpB2B,qBAAqBtB,UAAUmB,YAAc,SAAUC,GACnD,GAAqBe,gBAAiBf,EAAI9F,KAAKyE,SAC/CzE,MAAKiG,SAASrB,QAAQ,SAAU2B,QAC5B,GAAqBO,UAAWP,OAAO9B,UAAYkC,KAAKI,IAAI,EAAGF,eAAiBN,OAAO9B,WAAa,CACpG8B,QAAOV,YAAYiB,aAM3Bd,qBAAqBtB,UAAUqB,YAAc,WACzC,GAAqBgB,KAAM,CAK3B,OAJA/G,MAAKiG,SAASrB,QAAQ,SAAU2B,QAC5B,GAAqBT,GAAIS,OAAOR,aAChCgB,KAAMJ,KAAKI,IAAIjB,EAAGiB,OAEfA,KAEXC,OAAOC,eAAejB,qBAAqBtB,UAAW,WAIlDwC,IAAK,WAAc,MAAOlH,MAAKiG,UAC/BkB,YAAY,EACZC,cAAc,IAKlBpB,qBAAqBtB,UAAU2C,cAAgB,WAC3CrH,KAAKsH,QAAQ1C,QAAQ,SAAU2B,QACvBA,OAAOc,eACPd,OAAOc,mBAIZrB,wBAcPuB,WAAa,GAEjB7H,SAAQoE,iBAAmBA,iBAC3BpE,QAAQqE,iBAAmBA,iBAC3BrE,QAAQO,eAAiBA,eACzBP,QAAQsE,WAAaA,WACrBtE,QAAQkB,8BAAgCA,8BACxClB,QAAQiB,yBAA2BA,yBACnCjB,QAAQmB,4BAA8BA,4BACtCnB,QAAQqB,uBAAyBA,uBACjCrB,QAAQe,mCAAqCA,mCAC7Cf,QAAQS,kBAAoBA,kBAC5BT,QAAQ2B,sBAAwBA,sBAChC3B,QAAQc,uBAAyBA,uBACjCd,QAAQa,2BAA6BA,2BACrCb,QAAQoB,0BAA4BA,0BACpCpB,QAAQsB,yBAA2BA,yBACnCtB,QAAQW,uBAAyBA,uBACjCX,QAAQgB,uBAAyBA,uBACjChB,QAAQY,4BAA8BA,4BACtCZ,QAAQU,yBAA2BA,yBACnCV,QAAQ8B,QAAUA,QAClB9B,QAAQqD,aAAeA,aACvBrD,QAAQmD,UAAYA,UACpBnD,QAAQkC,MAAQA,MAChBlC,QAAQ6C,UAAYA,UACpB7C,QAAQyD,MAAQA,MAChBzD,QAAQqC,SAAWA,SACnBrC,QAAQ4D,QAAUA,QAClB5D,QAAQ2C,MAAQA,MAChB3C,QAAQuC,MAAQA,MAChBvC,QAAQ+C,WAAaA,WACrB/C,QAAQuB,QAAUA,QAClBvB,QAAQuD,aAAeA,aACvBvD,QAAQQ,WAAaA,WACrBR,QAAQmE,gBAAkBA,gBAC1BnE,QAAQuE,oBAAsBA,oBAC9BvE,QAAQ8H,sBAAwBxB,qBAChCtG,QAAQ6H,WAAaA,WAErBP,OAAOC,eAAevH,QAAS,cAAgB+H,OAAO","file":"/Users/misko/work/angular/dist/packages-dist/animations/bundles/animations.umd.min.js","sourcesContent":["/**\n * @license Angular v5.0.0-beta.6\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.animations = {})));\n}(this, (function (exports) { 'use strict';\n\n/**\n * @license Angular v5.0.0-beta.6\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * AnimationBuilder is an injectable service that is available when the {\\@link\n * BrowserAnimationsModule BrowserAnimationsModule} or {\\@link NoopAnimationsModule\n * NoopAnimationsModule} modules are used within an application.\n *\n * The purpose if this service is to produce an animation sequence programmatically within an\n * angular component or directive.\n *\n * Programmatic animations are first built and then a player is created when the build animation is\n * attached to an element.\n *\n * ```ts\n * // remember to include the BrowserAnimationsModule module for this to work...\n * import {AnimationBuilder} from '\\@angular/animations';\n *\n * class MyCmp {\n *   constructor(private _builder: AnimationBuilder) {}\n *\n *   makeAnimation(element: any) {\n *     // first build the animation\n *     const myAnimation = this._builder.build([\n *       style({ width: 0 }),\n *       animate(1000, style({ width: '100px' }))\n *     ]);\n *\n *     // then create a player from it\n *     const player = myAnimation.create(element);\n *\n *     player.play();\n *   }\n * }\n * ```\n *\n * When an animation is built an instance of {\\@link AnimationFactory AnimationFactory} will be\n * returned. Using that an {\\@link AnimationPlayer AnimationPlayer} can be created which can then be\n * used to start the animation.\n *\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nvar AnimationBuilder = (function () {\n    function AnimationBuilder() {\n    }\n    return AnimationBuilder;\n}());\n/**\n * An instance of `AnimationFactory` is returned from {\\@link AnimationBuilder#build\n * AnimationBuilder.build}.\n *\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nvar AnimationFactory = (function () {\n    function AnimationFactory() {\n    }\n    return AnimationFactory;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * An instance of this class is returned as an event parameter when an animation\n * callback is captured for an animation either during the start or done phase.\n *\n * ```typescript\n * \\@Component({\n *   host: {\n *     '[\\@myAnimationTrigger]': 'someExpression',\n *     '(\\@myAnimationTrigger.start)': 'captureStartEvent($event)',\n *     '(\\@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n *   },\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *        // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   someExpression: any = false;\n *   captureStartEvent(event: AnimationEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n *\n *   captureDoneEvent(event: AnimationEvent) {\n *     // the toState, fromState and totalTime data is accessible from the event variable\n *   }\n * }\n * ```\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */ function AnimationEvent() { }\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @record\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */ function ɵStyleData() { }\n/** @enum {number} */\nvar AnimationMetadataType = {\n    State: 0,\n    Transition: 1,\n    Sequence: 2,\n    Group: 3,\n    Animate: 4,\n    Keyframes: 5,\n    Style: 6,\n    Trigger: 7,\n    Reference: 8,\n    AnimateChild: 9,\n    AnimateRef: 10,\n    Query: 11,\n    Stagger: 12,\n};\n/**\n * \\@experimental Animation support is experimental.\n */\nvar AUTO_STYLE = '*';\n/**\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link trigger trigger animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationTriggerMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link state state animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationStateMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link transition transition animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationTransitionMetadata() { }\n/**\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationReferenceMetadata() { }\n/**\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationQueryMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link keyframes keyframes animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationKeyframesSequenceMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link style style animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationStyleMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link animate animate animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationAnimateMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link animateChild animateChild animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationAnimateChildMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link useAnimation useAnimation animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationAnimateRefMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link sequence sequence animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationSequenceMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link group group animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationGroupMetadata() { }\n/**\n * Metadata representing the entry of animations. Instances of this interface are provided via the\n * animation DSL when the {\\@link stagger stagger animation function} is called.\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationStaggerMetadata() { }\n/**\n * `trigger` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations component animations metadata page} to gain a better\n * understanding of how animations in Angular are used.\n *\n * `trigger` Creates an animation trigger which will a list of {\\@link state state} and\n * {\\@link transition transition} entries that will be evaluated when the expression\n * bound to the trigger changes.\n *\n * Triggers are registered within the component annotation data under the\n * {\\@link Component#animations animations section}. An animation trigger can be placed on an element\n * within a template by referencing the name of the trigger followed by the expression value that\n * the\n * trigger is bound to (in the form of `[\\@triggerName]=\"expression\"`.\n *\n * ### Usage\n *\n * `trigger` will create an animation trigger reference based on the provided `name` value. The\n * provided `animation` value is expected to be an array consisting of {\\@link state state} and\n * {\\@link transition transition} declarations.\n *\n * ```typescript\n * \\@Component({\n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * ## Disable Animations\n * A special animation control binding called `\\@.disabled` can be placed on an element which will\n * then disable animations for any inner animation triggers situated within the element as well as\n * any animations on the element itself.\n *\n * When true, the `\\@.disabled` binding will prevent all animations from rendering. The example\n * below shows how to use this feature:\n *\n * ```ts\n * \\@Component({\n *   selector: 'my-component',\n *   template: `\n *     <div [\\@.disabled]=\"isDisabled\">\n *       <div [\\@childAnimation]=\"exp\"></div>\n *     </div>\n *   `,\n *   animations: [\n *     trigger(\"childAnimation\", [\n *       // ...\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   isDisabled = true;\n *   exp = '...';\n * }\n * ```\n *\n * The `\\@childAnimation` trigger will not animate because `\\@.disabled` prevents it from happening\n * (when true).\n *\n * Note that `\\@.disbled` will only disable all animations (this means any animations running on\n * the same element will also be disabled).\n *\n * ### Disabling Animations Application-wide\n * When an area of the template is set to have animations disabled, **all** inner components will\n * also have their animations disabled as well. This means that all animations for an angular\n * application can be disabled by placing a host binding set on `\\@.disabled` on the topmost Angular\n * component.\n *\n * ```ts\n * import {Component, HostBinding} from '\\@angular/core';\n *\n * \\@Component({\n *   selector: 'app-component',\n *   templateUrl: 'app.component.html',\n * })\n * class AppComponent {\n *   \\@HostBinding('\\@.disabled')\n *   public animationsDisabled = true;\n * }\n * ```\n *\n * ### What about animations that us `query()` and `animateChild()`?\n * Despite inner animations being disabled, a parent animation can {\\@link query query} for inner\n * elements located in disabled areas of the template and still animate them as it sees fit. This is\n * also the case for when a sub animation is queried by a parent and then later animated using {\\@link\n * animateChild animateChild}.\n *\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} definitions\n * @return {?}\n */\nfunction trigger(name, definitions) {\n    return { type: AnimationMetadataType.Trigger, name: name, definitions: definitions, options: {} };\n}\n/**\n * `animate` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `animate` specifies an animation step that will apply the provided `styles` data for a given\n * amount of time based on the provided `timing` expression value. Calls to `animate` are expected\n * to be used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link\n * transition transition}.\n *\n * ### Usage\n *\n * The `animate` function accepts two input parameters: `timing` and `styles`:\n *\n * - `timing` is a string based value that can be a combination of a duration with optional delay\n * and easing values. The format for the expression breaks down to `duration delay easing`\n * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the\n * `duration` value in millisecond form.\n * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n * keyframes keyframes}. If left empty then the styles from the destination state will be collected\n * and used (this is useful when describing an animation step that will complete an animation by\n * {\\@link transition#the-final-animate-call animating to the final state}).\n *\n * ```typescript\n * // various functions for specifying timing data\n * animate(500, style(...))\n * animate(\"1s\", style(...))\n * animate(\"100ms 0.5s\", style(...))\n * animate(\"5s ease\", style(...))\n * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n *\n * // either style() of keyframes() can be used\n * animate(500, style({ background: \"red\" }))\n * animate(500, keyframes([\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} timings\n * @param {?=} styles\n * @return {?}\n */\nfunction animate(timings, styles) {\n    if (styles === void 0) { styles = null; }\n    return { type: AnimationMetadataType.Animate, styles: styles, timings: timings };\n}\n/**\n * `group` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are\n * useful when a series of styles must be animated/closed off at different starting/ending times.\n *\n * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n * transition} and it will only continue to the next instruction once all of the inner animation\n * steps have completed.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `group` animation function can either consist of {\\@link\n * style style} or {\\@link animate animate} function calls. Each call to `style()` or `animate()`\n * within a group will be executed instantly (use {\\@link keyframes keyframes} or a {\\@link\n * animate#usage animate() with a delay value} to offset styles to be applied at a later time).\n *\n * ```typescript\n * group([\n *   animate(\"1s\", { background: \"black\" }))\n *   animate(\"2s\", { color: \"white\" }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nfunction group(steps, options) {\n    if (options === void 0) { options = null; }\n    return { type: AnimationMetadataType.Group, steps: steps, options: options };\n}\n/**\n * `sequence` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by\n * default when an array is passed as animation data into {\\@link transition transition}.)\n *\n * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n * transition} and it will only continue to the next instruction once each of the inner animation\n * steps have completed.\n *\n * To perform animation styling in parallel with other animation steps then have a look at the\n * {\\@link group group} animation function.\n *\n * ### Usage\n *\n * The `steps` data that is passed into the `sequence` animation function can either consist of\n * {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply the\n * provided styling data immediately while a call to `animate()` will apply its styling data over a\n * given time depending on its timing data.\n *\n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", { opacity: 1 }))\n * ])\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nfunction sequence(steps, options) {\n    if (options === void 0) { options = null; }\n    return { type: AnimationMetadataType.Sequence, steps: steps, options: options };\n}\n/**\n * `style` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `style` declares a key/value object containing CSS properties/styles that can then be used for\n * {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as styling data\n * for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n *\n * ### Usage\n *\n * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs\n * to be defined.\n *\n * ```typescript\n * // string values are used for css properties\n * style({ background: \"red\", color: \"blue\" })\n *\n * // numerical (pixel) values are also supported\n * style({ width: 100, height: 0 })\n * ```\n *\n * #### Auto-styles (using `*`)\n *\n * When an asterix (`*`) character is used as a value then it will be detected from the element\n * being animated and applied as animation data when the animation starts.\n *\n * This feature proves useful for a state depending on layout and/or environment factors; in such\n * cases the styles are calculated just before the animation starts.\n *\n * ```typescript\n * // the steps below will animate from 0 to the\n * // actual height of the element\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} tokens\n * @return {?}\n */\nfunction style(tokens) {\n    return { type: AnimationMetadataType.Style, styles: tokens, offset: null };\n}\n/**\n * `state` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `state` declares an animation state within the given trigger. When a state is active within a\n * component then its associated styles will persist on the element that the trigger is attached to\n * (even when the animation ends).\n *\n * To animate between states, have a look at the animation {\\@link transition transition} DSL\n * function. To register states to an animation trigger please have a look at the {\\@link trigger\n * trigger} function.\n *\n * #### The `void` state\n *\n * The `void` state value is a reserved word that angular uses to determine when the element is not\n * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n * associated element is void).\n *\n * #### The `*` (default) state\n *\n * The `*` state (when styled) is a fallback state that will be used if the state that is being\n * animated is not declared within the trigger.\n *\n * ### Usage\n *\n * `state` will declare an animation state with its associated styles\n * within the given trigger.\n *\n * - `stateNameExpr` can be one or more state names separated by commas.\n * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n * the state has been reached.\n *\n * ```typescript\n * // \"void\" is a reserved name for a state and is used to represent\n * // the state in which an element is detached from from the application.\n * state(\"void\", style({ height: 0 }))\n *\n * // user-defined states\n * state(\"closed\", style({ height: 0 }))\n * state(\"open, visible\", style({ height: \"*\" }))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} styles\n * @param {?=} options\n * @return {?}\n */\nfunction state(name, styles, options) {\n    return { type: AnimationMetadataType.State, name: name, styles: styles, options: options };\n}\n/**\n * `keyframes` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n * by an `offset` value.\n *\n * ### Usage\n *\n * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n * animation function. Instead of applying animations from where they are currently to their\n * destination, keyframes can describe how each style entry is applied and at what point within the\n * animation arc (much like CSS Keyframe Animations do).\n *\n * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what\n * percentage of the animate time the styles will be applied.\n *\n * ```typescript\n * // the provided offset values describe when each backgroundColor value is applied.\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n *\n * Alternatively, if there are no `offset` values used within the style entries then the offsets\n * will be calculated automatically.\n *\n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nfunction keyframes(steps) {\n    return { type: AnimationMetadataType.Keyframes, steps: steps };\n}\n/**\n * `transition` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. If this information is new, please navigate to the {\\@link\n * Component#animations component animations metadata page} to gain a better understanding of\n * how animations in Angular are used.\n *\n * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>\n * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting\n * and/or ending state).\n *\n * A function can also be provided as the `stateChangeExpr` argument for a transition and this\n * function will be executed each time a state change occurs. If the value returned within the\n * function is true then the associated animation will be run.\n *\n * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n * to animate to a state value and persist its styles then one or more {\\@link state animation\n * states} is expected to be defined.\n *\n * ### Usage\n *\n * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n * what the previous state is and what the current state has become. In other words, if a transition\n * is defined that matches the old/current state criteria then the associated animation will be\n * triggered.\n *\n * ```typescript\n * // all transition/state changes are defined within an animation trigger\n * trigger(\"myAnimationTrigger\", [\n *   // if a state is defined then its styles will be persisted when the\n *   // animation has fully completed itself\n *   state(\"on\", style({ background: \"green\" })),\n *   state(\"off\", style({ background: \"grey\" })),\n *\n *   // a transition animation that will be kicked off when the state value\n *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n *   transition(\"on => off\", animate(500)),\n *\n *   // it is also possible to do run the same animation for both directions\n *   transition(\"on <=> off\", animate(500)),\n *\n *   // or to define multiple states pairs separated by commas\n *   transition(\"on => off, off => void\", animate(500)),\n *\n *   // this is a catch-all state change for when an element is inserted into\n *   // the page and the destination state is unknown\n *   transition(\"void => *\", [\n *     style({ opacity: 0 }),\n *     animate(500)\n *   ]),\n *\n *   // this will capture a state change between any states\n *   transition(\"* => *\", animate(\"1s 0s\")),\n *\n *   // you can also go full out and include a function\n *   transition((fromState, toState) => {\n *     // when `true` then it will allow the animation below to be invoked\n *     return fromState == \"off\" && toState == \"on\";\n *   }, animate(\"1s 0s\"))\n * ])\n * ```\n *\n * The template associated with this component will make use of the `myAnimationTrigger` animation\n * trigger by binding to an element within its template code.\n *\n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n *\n * #### The final `animate` call\n *\n * If the final step within the transition steps is a call to `animate()` that **only** uses a\n * timing value with **no style data** then it will be automatically used as the final animation arc\n * for the element to animate itself to the final state. This involves an automatic mix of\n * adding/removing CSS styles so that the element will be in the exact state it should be for the\n * applied state to be presented correctly.\n *\n * ```\n * // start off by hiding the element, but make sure that it animates properly to whatever state\n * // is currently active for \"myAnimationTrigger\"\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n * ])\n * ```\n *\n * ### Using :enter and :leave\n *\n * Given that enter (insertion) and leave (removal) animations are so common, the `transition`\n * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*\n * => void` state changes.\n *\n * ```\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n * ]),\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n * ])\n * ```\n *\n * ### Using :increment and :decrement\n * In addition to the :enter and :leave transition aliases, the :increment and :decrement aliases\n * can be used to kick off a transition when a numeric value has increased or decreased in value.\n *\n * ```\n * import {group, animate, query, transition, style, trigger} from '\\@angular/animations';\n * import {Component} from '\\@angular/core';\n *\n * \\@Component({\n *   selector: 'banner-carousel-component',\n *   styles: [`\n *     .banner-container {\n *        position:relative;\n *        height:500px;\n *        overflow:hidden;\n *      }\n *     .banner-container > .banner {\n *        position:absolute;\n *        left:0;\n *        top:0;\n *        font-size:200px;\n *        line-height:500px;\n *        font-weight:bold;\n *        text-align:center;\n *        width:100%;\n *      }\n *   `],\n *   template: `\n *     <button (click)=\"previous()\">Previous</button>\n *     <button (click)=\"next()\">Next</button>\n *     <hr>\n *     <div [\\@bannerAnimation]=\"selectedIndex\" class=\"banner-container\">\n *       <div class=\"banner\"> {{ banner }} </div>\n *     </div>\n *   `\n *   animations: [\n *     trigger('bannerAnimation', [\n *       transition(\":increment\", group([\n *         query(':enter', [\n *           style({ left: '100%' }),\n *           animate('0.5s ease-out', style('*'))\n *         ]),\n *         query(':leave', [\n *           animate('0.5s ease-out', style({ left: '-100%' }))\n *         ])\n *       ])),\n *       transition(\":decrement\", group([\n *         query(':enter', [\n *           style({ left: '-100%' }),\n *           animate('0.5s ease-out', style('*'))\n *         ]),\n *         query(':leave', [\n *           animate('0.5s ease-out', style({ left: '100%' }))\n *         ])\n *       ])),\n *     ])\n *   ]\n * })\n * class BannerCarouselComponent {\n *   allBanners: string[] = ['1', '2', '3', '4'];\n *   selectedIndex: number = 0;\n *\n *   get banners() {\n *      return [this.allBanners[this.selectedIndex]];\n *   }\n *\n *   previous() {\n *     this.selectedIndex = Math.max(this.selectedIndex - 1, 0);\n *   }\n *\n *   next() {\n *     this.selectedIndex = Math.min(this.selectedIndex + 1, this.allBanners.length - 1);\n *   }\n * }\n * ```\n *\n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n *\n * \\@experimental Animation support is experimental.\n * @param {?} stateChangeExpr\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nfunction transition(stateChangeExpr, steps, options) {\n    if (options === void 0) { options = null; }\n    return { type: AnimationMetadataType.Transition, expr: stateChangeExpr, animation: steps, options: options };\n}\n/**\n * `animation` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language.\n *\n * `var myAnimation = animation(...)` is designed to produce a reusable animation that can be later\n * invoked in another animation or sequence. Reusable animations are designed to make use of\n * animation parameters and the produced animation can be used via the `useAnimation` method.\n *\n * ```\n * var fadeAnimation = animation([\n *   style({ opacity: '{{ start }}' }),\n *   animate('{{ time }}',\n *     style({ opacity: '{{ end }}'))\n * ], { params: { time: '1000ms', start: 0, end: 1 }});\n * ```\n *\n * If parameters are attached to an animation then they act as **default parameter values**. When an\n * animation is invoked via `useAnimation` then parameter values are allowed to be passed in\n * directly. If any of the passed in parameter values are missing then the default values will be\n * used.\n *\n * ```\n * useAnimation(fadeAnimation, {\n *   params: {\n *     time: '2s',\n *     start: 1,\n *     end: 0\n *   }\n * })\n * ```\n *\n * If one or more parameter values are missing before animated then an error will be thrown.\n *\n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @param {?=} options\n * @return {?}\n */\nfunction animation(steps, options) {\n    if (options === void 0) { options = null; }\n    return { type: AnimationMetadataType.Reference, animation: steps, options: options };\n}\n/**\n * `animateChild` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. It works by allowing a queried element to execute its own\n * animation within the animation sequence.\n *\n * Each time an animation is triggered in angular, the parent animation\n * will always get priority and any child animations will be blocked. In order\n * for a child animation to run, the parent animation must query each of the elements\n * containing child animations and then allow the animations to run using `animateChild`.\n *\n * The example HTML code below shows both parent and child elements that have animation\n * triggers that will execute at the same time.\n *\n * ```html\n * <!-- parent-child.component.html -->\n * <button (click)=\"exp =! exp\">Toggle</button>\n * <hr>\n *\n * <div [\\@parentAnimation]=\"exp\">\n *   <header>Hello</header>\n *   <div [\\@childAnimation]=\"exp\">\n *       one\n *   </div>\n *   <div [\\@childAnimation]=\"exp\">\n *       two\n *   </div>\n *   <div [\\@childAnimation]=\"exp\">\n *       three\n *   </div>\n * </div>\n * ```\n *\n * Now when the `exp` value changes to true, only the `parentAnimation` animation will animate\n * because it has priority. However, using `query` and `animateChild` each of the inner animations\n * can also fire:\n *\n * ```ts\n * // parent-child.component.ts\n * import {trigger, transition, animate, style, query, animateChild} from '\\@angular/animations';\n * \\@Component({\n *   selector: 'parent-child-component',\n *   animations: [\n *     trigger('parentAnimation', [\n *       transition('false => true', [\n *         query('header', [\n *           style({ opacity: 0 }),\n *           animate(500, style({ opacity: 1 }))\n *         ]),\n *         query('\\@childAnimation', [\n *           animateChild()\n *         ])\n *       ])\n *     ]),\n *     trigger('childAnimation', [\n *       transition('false => true', [\n *         style({ opacity: 0 }),\n *         animate(500, style({ opacity: 1 }))\n *       ])\n *     ])\n *   ]\n * })\n * class ParentChildCmp {\n *   exp: boolean = false;\n * }\n * ```\n *\n * In the animation code above, when the `parentAnimation` transition kicks off it first queries to\n * find the header element and fades it in. It then finds each of the sub elements that contain the\n * `\\@childAnimation` trigger and then allows for their animations to fire.\n *\n * This example can be further extended by using stagger:\n *\n * ```ts\n * query('\\@childAnimation', stagger(100, [\n *   animateChild()\n * ]))\n * ```\n *\n * Now each of the sub animations start off with respect to the `100ms` staggering step.\n *\n * ## The first frame of child animations\n * When sub animations are executed using `animateChild` the animation engine will always apply the\n * first frame of every sub animation immediately at the start of the animation sequence. This way\n * the parent animation does not need to set any initial styling data on the sub elements before the\n * sub animations kick off.\n *\n * In the example above the first frame of the `childAnimation`'s `false => true` transition\n * consists of a style of `opacity: 0`. This is applied immediately when the `parentAnimation`\n * animation transition sequence starts. Only then when the `\\@childAnimation` is queried and called\n * with `animateChild` will it then animate to its destination of `opacity: 1`.\n *\n * Note that this feature designed to be used alongside {\\@link query query()} and it will only work\n * with animations that are assigned using the Angular animation DSL (this means that CSS keyframes\n * and transitions are not handled by this API).\n *\n * \\@experimental Animation support is experimental.\n * @param {?=} options\n * @return {?}\n */\nfunction animateChild(options) {\n    if (options === void 0) { options = null; }\n    return { type: AnimationMetadataType.AnimateChild, options: options };\n}\n/**\n * `useAnimation` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. It is used to kick off a reusable animation that is created using {\\@link\n * animation animation()}.\n *\n * \\@experimental Animation support is experimental.\n * @param {?} animation\n * @param {?=} options\n * @return {?}\n */\nfunction useAnimation(animation, options) {\n    if (options === void 0) { options = null; }\n    return { type: AnimationMetadataType.AnimateRef, animation: animation, options: options };\n}\n/**\n * `query` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language.\n *\n * query() is used to find one or more inner elements within the current element that is\n * being animated within the sequence. The provided animation steps are applied\n * to the queried element (by default, an array is provided, then this will be\n * treated as an animation sequence).\n *\n * ### Usage\n *\n * query() is designed to collect mutiple elements and works internally by using\n * `element.querySelectorAll`. An additional options object can be provided which\n * can be used to limit the total amount of items to be collected.\n *\n * ```js\n * query('div', [\n *   animate(...),\n *   animate(...)\n * ], { limit: 1 })\n * ```\n *\n * query(), by default, will throw an error when zero items are found. If a query\n * has the `optional` flag set to true then this error will be ignored.\n *\n * ```js\n * query('.some-element-that-may-not-be-there', [\n *   animate(...),\n *   animate(...)\n * ], { optional: true })\n * ```\n *\n * ### Special Selector Values\n *\n * The selector value within a query can collect elements that contain angular-specific\n * characteristics\n * using special pseudo-selectors tokens.\n *\n * These include:\n *\n *  - Querying for newly inserted/removed elements using `query(\":enter\")`/`query(\":leave\")`\n *  - Querying all currently animating elements using `query(\":animating\")`\n *  - Querying elements that contain an animation trigger using `query(\"\\@triggerName\")`\n *  - Querying all elements that contain an animation triggers using `query(\"\\@*\")`\n *  - Including the current element into the animation sequence using `query(\":self\")`\n *\n *\n *  Each of these pseudo-selector tokens can be merged together into a combined query selector\n * string:\n *\n *  ```\n *  query(':self, .record:enter, .record:leave, \\@subTrigger', [...])\n *  ```\n *\n * ### Demo\n *\n * ```\n * \\@Component({\n *   selector: 'inner',\n *   template: `\n *     <div [\\@queryAnimation]=\"exp\">\n *       <h1>Title</h1>\n *       <div class=\"content\">\n *         Blah blah blah\n *       </div>\n *     </div>\n *   `,\n *   animations: [\n *    trigger('queryAnimation', [\n *      transition('* => goAnimate', [\n *        // hide the inner elements\n *        query('h1', style({ opacity: 0 })),\n *        query('.content', style({ opacity: 0 })),\n *\n *        // animate the inner elements in, one by one\n *        query('h1', animate(1000, style({ opacity: 1 })),\n *        query('.content', animate(1000, style({ opacity: 1 })),\n *      ])\n *    ])\n *  ]\n * })\n * class Cmp {\n *   exp = '';\n *\n *   goAnimate() {\n *     this.exp = 'goAnimate';\n *   }\n * }\n * ```\n *\n * \\@experimental Animation support is experimental.\n * @param {?} selector\n * @param {?} animation\n * @param {?=} options\n * @return {?}\n */\nfunction query(selector, animation, options) {\n    if (options === void 0) { options = null; }\n    return { type: AnimationMetadataType.Query, selector: selector, animation: animation, options: options };\n}\n/**\n * `stagger` is an animation-specific function that is designed to be used inside of Angular's\n * animation DSL language. It is designed to be used inside of an animation {\\@link query query()}\n * and works by issuing a timing gap between after each queried item is animated.\n *\n * ### Usage\n *\n * In the example below there is a container element that wraps a list of items stamped out\n * by an ngFor. The container element contains an animation trigger that will later be set\n * to query for each of the inner items.\n *\n * ```html\n * <!-- list.component.html -->\n * <button (click)=\"toggle()\">Show / Hide Items</button>\n * <hr />\n * <div [\\@listAnimation]=\"items.length\">\n *   <div *ngFor=\"let item of items\">\n *     {{ item }}\n *   </div>\n * </div>\n * ```\n *\n * The component code for this looks as such:\n *\n * ```ts\n * import {trigger, transition, style, animate, query, stagger} from '\\@angular/animations';\n * \\@Component({\n *   templateUrl: 'list.component.html',\n *   animations: [\n *     trigger('listAnimation', [\n *        //...\n *     ])\n *   ]\n * })\n * class ListComponent {\n *   items = [];\n *\n *   showItems() {\n *     this.items = [0,1,2,3,4];\n *   }\n *\n *   hideItems() {\n *     this.items = [];\n *   }\n *\n *   toggle() {\n *     this.items.length ? this.hideItems() : this.showItems();\n *   }\n * }\n * ```\n *\n * And now for the animation trigger code:\n *\n * ```ts\n * trigger('listAnimation', [\n *   transition('* => *', [ // each time the binding value changes\n *     query(':leave', [\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 0 }))\n *       ])\n *     ]),\n *     query(':enter', [\n *       style({ opacity: 0 }),\n *       stagger(100, [\n *         animate('0.5s', style({ opacity: 1 }))\n *       ])\n *     ])\n *   ])\n * ])\n * ```\n *\n * Now each time the items are added/removed then either the opacity\n * fade-in animation will run or each removed item will be faded out.\n * When either of these animations occur then a stagger effect will be\n * applied after each item's animation is started.\n *\n * \\@experimental Animation support is experimental.\n * @param {?} timings\n * @param {?} animation\n * @return {?}\n */\nfunction stagger(timings, animation) {\n    return { type: AnimationMetadataType.Stagger, timings: timings, animation: animation };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?} cb\n * @return {?}\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */ function scheduleMicroTask(cb) {\n    Promise.resolve(null).then(cb);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * AnimationPlayer controls an animation sequence that was produced from a programmatic animation.\n * (see {\\@link AnimationBuilder AnimationBuilder} for more information on how to create programmatic\n * animations.)\n *\n * \\@experimental Animation support is experimental.\n * @record\n */\nfunction AnimationPlayer() { }\n/**\n * \\@experimental Animation support is experimental.\n */\nvar NoopAnimationPlayer = (function () {\n    function NoopAnimationPlayer() {\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._onDestroyFns = [];\n        this._started = false;\n        this._destroyed = false;\n        this._finished = false;\n        this.parentPlayer = null;\n        this.totalTime = 0;\n    }\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.init = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.play = function () {\n        if (!this.hasStarted()) {\n            this.triggerMicrotask();\n            this._onStart();\n        }\n        this._started = true;\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.triggerMicrotask = function () {\n        var _this = this;\n        scheduleMicroTask(function () { return _this._onFinish(); });\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype._onStart = function () {\n        this._onStartFns.forEach(function (fn) { return fn(); });\n        this._onStartFns = [];\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.pause = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.restart = function () { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.destroy = function () {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            if (!this.hasStarted()) {\n                this._onStart();\n            }\n            this.finish();\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.reset = function () { };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.setPosition = function (p) { };\n    /**\n     * @return {?}\n     */\n    NoopAnimationPlayer.prototype.getPosition = function () { return 0; };\n    return NoopAnimationPlayer;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar AnimationGroupPlayer = (function () {\n    /**\n     * @param {?} _players\n     */\n    function AnimationGroupPlayer(_players) {\n        var _this = this;\n        this._players = _players;\n        this._onDoneFns = [];\n        this._onStartFns = [];\n        this._finished = false;\n        this._started = false;\n        this._destroyed = false;\n        this._onDestroyFns = [];\n        this.parentPlayer = null;\n        this.totalTime = 0;\n        var /** @type {?} */ doneCount = 0;\n        var /** @type {?} */ destroyCount = 0;\n        var /** @type {?} */ startCount = 0;\n        var /** @type {?} */ total = this._players.length;\n        if (total == 0) {\n            scheduleMicroTask(function () { return _this._onFinish(); });\n        }\n        else {\n            this._players.forEach(function (player) {\n                player.parentPlayer = _this;\n                player.onDone(function () {\n                    if (++doneCount >= total) {\n                        _this._onFinish();\n                    }\n                });\n                player.onDestroy(function () {\n                    if (++destroyCount >= total) {\n                        _this._onDestroy();\n                    }\n                });\n                player.onStart(function () {\n                    if (++startCount >= total) {\n                        _this._onStart();\n                    }\n                });\n            });\n        }\n        this.totalTime = this._players.reduce(function (time, player) { return Math.max(time, player.totalTime); }, 0);\n    }\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onFinish = function () {\n        if (!this._finished) {\n            this._finished = true;\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onStart = function () {\n        if (!this.hasStarted()) {\n            this._onStartFns.forEach(function (fn) { return fn(); });\n            this._onStartFns = [];\n            this._started = true;\n        }\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.onDestroy = function (fn) { this._onDestroyFns.push(fn); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.play = function () {\n        if (!this.parentPlayer) {\n            this.init();\n        }\n        this._onStart();\n        this._players.forEach(function (player) { return player.play(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.finish = function () {\n        this._onFinish();\n        this._players.forEach(function (player) { return player.finish(); });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.destroy = function () { this._onDestroy(); };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype._onDestroy = function () {\n        if (!this._destroyed) {\n            this._destroyed = true;\n            this._onFinish();\n            this._players.forEach(function (player) { return player.destroy(); });\n            this._onDestroyFns.forEach(function (fn) { return fn(); });\n            this._onDestroyFns = [];\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.reset = function () {\n        this._players.forEach(function (player) { return player.reset(); });\n        this._destroyed = false;\n        this._finished = false;\n        this._started = false;\n    };\n    /**\n     * @param {?} p\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.setPosition = function (p) {\n        var /** @type {?} */ timeAtPosition = p * this.totalTime;\n        this._players.forEach(function (player) {\n            var /** @type {?} */ position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;\n            player.setPosition(position);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.getPosition = function () {\n        var /** @type {?} */ min = 0;\n        this._players.forEach(function (player) {\n            var /** @type {?} */ p = player.getPosition();\n            min = Math.min(p, min);\n        });\n        return min;\n    };\n    Object.defineProperty(AnimationGroupPlayer.prototype, \"players\", {\n        /**\n         * @return {?}\n         */\n        get: function () { return this._players; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AnimationGroupPlayer.prototype.beforeDestroy = function () {\n        this.players.forEach(function (player) {\n            if (player.beforeDestroy) {\n                player.beforeDestroy();\n            }\n        });\n    };\n    return AnimationGroupPlayer;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar ɵPRE_STYLE = '!';\n\nexports.AnimationBuilder = AnimationBuilder;\nexports.AnimationFactory = AnimationFactory;\nexports.AnimationEvent = AnimationEvent;\nexports.AUTO_STYLE = AUTO_STYLE;\nexports.AnimationAnimateChildMetadata = AnimationAnimateChildMetadata;\nexports.AnimationAnimateMetadata = AnimationAnimateMetadata;\nexports.AnimationAnimateRefMetadata = AnimationAnimateRefMetadata;\nexports.AnimationGroupMetadata = AnimationGroupMetadata;\nexports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;\nexports.AnimationMetadata = AnimationMetadata;\nexports.AnimationMetadataType = AnimationMetadataType;\nexports.AnimationQueryMetadata = AnimationQueryMetadata;\nexports.AnimationReferenceMetadata = AnimationReferenceMetadata;\nexports.AnimationSequenceMetadata = AnimationSequenceMetadata;\nexports.AnimationStaggerMetadata = AnimationStaggerMetadata;\nexports.AnimationStateMetadata = AnimationStateMetadata;\nexports.AnimationStyleMetadata = AnimationStyleMetadata;\nexports.AnimationTransitionMetadata = AnimationTransitionMetadata;\nexports.AnimationTriggerMetadata = AnimationTriggerMetadata;\nexports.animate = animate;\nexports.animateChild = animateChild;\nexports.animation = animation;\nexports.group = group;\nexports.keyframes = keyframes;\nexports.query = query;\nexports.sequence = sequence;\nexports.stagger = stagger;\nexports.state = state;\nexports.style = style;\nexports.transition = transition;\nexports.trigger = trigger;\nexports.useAnimation = useAnimation;\nexports.ɵStyleData = ɵStyleData;\nexports.AnimationPlayer = AnimationPlayer;\nexports.NoopAnimationPlayer = NoopAnimationPlayer;\nexports.ɵAnimationGroupPlayer = AnimationGroupPlayer;\nexports.ɵPRE_STYLE = ɵPRE_STYLE;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=animations.umd.js.map\n"]}